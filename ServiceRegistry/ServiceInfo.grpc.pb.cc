// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ServiceInfo.proto

#include "./include/ServiceInfo.pb.h"
#include "./include/ServiceInfo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace ServiceInfo {

static const char* ServiceRegistry_method_names[] = {
  "/ServiceInfo.ServiceRegistry/getServiceInfo",
  "/ServiceInfo.ServiceRegistry/setServiceInfo",
};

std::unique_ptr< ServiceRegistry::Stub> ServiceRegistry::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServiceRegistry::Stub> stub(new ServiceRegistry::Stub(channel, options));
  return stub;
}

ServiceRegistry::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getServiceInfo_(ServiceRegistry_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setServiceInfo_(ServiceRegistry_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServiceRegistry::Stub::getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::ServiceInfo::GetServiceInfoResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getServiceInfo_, context, request, response);
}

void ServiceRegistry::Stub::async::getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getServiceInfo_, context, request, response, std::move(f));
}

void ServiceRegistry::Stub::async::getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getServiceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>* ServiceRegistry::Stub::PrepareAsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServiceInfo::GetServiceInfoResp, ::ServiceInfo::GetServiceInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getServiceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>* ServiceRegistry::Stub::AsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetServiceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServiceRegistry::Stub::setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::ServiceInfo::SetServiceInfoResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setServiceInfo_, context, request, response);
}

void ServiceRegistry::Stub::async::setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setServiceInfo_, context, request, response, std::move(f));
}

void ServiceRegistry::Stub::async::setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setServiceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>* ServiceRegistry::Stub::PrepareAsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServiceInfo::SetServiceInfoResp, ::ServiceInfo::SetServiceInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setServiceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>* ServiceRegistry::Stub::AsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetServiceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ServiceRegistry::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceRegistry_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceRegistry::Service, ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServiceRegistry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServiceInfo::GetServiceInfoReq* req,
             ::ServiceInfo::GetServiceInfoResp* resp) {
               return service->getServiceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceRegistry_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceRegistry::Service, ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServiceRegistry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ServiceInfo::SetServiceInfoReq* req,
             ::ServiceInfo::SetServiceInfoResp* resp) {
               return service->setServiceInfo(ctx, req, resp);
             }, this)));
}

ServiceRegistry::Service::~Service() {
}

::grpc::Status ServiceRegistry::Service::getServiceInfo(::grpc::ServerContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceRegistry::Service::setServiceInfo(::grpc::ServerContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ServiceInfo
#include <grpcpp/ports_undef.inc>

