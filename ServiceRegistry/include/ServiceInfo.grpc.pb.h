// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ServiceInfo.proto
#ifndef GRPC_ServiceInfo_2eproto__INCLUDED
#define GRPC_ServiceInfo_2eproto__INCLUDED

#include "ServiceInfo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace ServiceInfo {

class ServiceRegistry final {
 public:
  static constexpr char const* service_full_name() {
    return "ServiceInfo.ServiceRegistry";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::ServiceInfo::GetServiceInfoResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>> AsyncgetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>>(AsyncgetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>> PrepareAsyncgetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>>(PrepareAsyncgetServiceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::ServiceInfo::SetServiceInfoResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>> AsyncsetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>>(AsyncsetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>> PrepareAsyncsetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>>(PrepareAsyncsetServiceInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>* AsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::GetServiceInfoResp>* PrepareAsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>* AsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInfo::SetServiceInfoResp>* PrepareAsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::ServiceInfo::GetServiceInfoResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>> AsyncgetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>>(AsyncgetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>> PrepareAsyncgetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>>(PrepareAsyncgetServiceInfoRaw(context, request, cq));
    }
    ::grpc::Status setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::ServiceInfo::SetServiceInfoResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>> AsyncsetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>>(AsyncsetServiceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>> PrepareAsyncsetServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>>(PrepareAsyncsetServiceInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, std::function<void(::grpc::Status)>) override;
      void getServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, std::function<void(::grpc::Status)>) override;
      void setServiceInfo(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>* AsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInfo::GetServiceInfoResp>* PrepareAsyncgetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::GetServiceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>* AsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInfo::SetServiceInfoResp>* PrepareAsyncsetServiceInfoRaw(::grpc::ClientContext* context, const ::ServiceInfo::SetServiceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getServiceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_setServiceInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getServiceInfo(::grpc::ServerContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response);
    virtual ::grpc::Status setServiceInfo(::grpc::ServerContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetServiceInfo(::grpc::ServerContext* context, ::ServiceInfo::GetServiceInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::ServiceInfo::GetServiceInfoResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetServiceInfo(::grpc::ServerContext* context, ::ServiceInfo::SetServiceInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::ServiceInfo::SetServiceInfoResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getServiceInfo<WithAsyncMethod_setServiceInfo<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServiceInfo::GetServiceInfoReq* request, ::ServiceInfo::GetServiceInfoResp* response) { return this->getServiceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getServiceInfo(
        ::grpc::MessageAllocator< ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServiceInfo::SetServiceInfoReq* request, ::ServiceInfo::SetServiceInfoResp* response) { return this->setServiceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_setServiceInfo(
        ::grpc::MessageAllocator< ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getServiceInfo<WithCallbackMethod_setServiceInfo<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetServiceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetServiceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getServiceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setServiceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setServiceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getServiceInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServiceInfo::GetServiceInfoReq, ::ServiceInfo::GetServiceInfoResp>* streamer) {
                       return this->StreamedgetServiceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::GetServiceInfoReq* /*request*/, ::ServiceInfo::GetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetServiceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceInfo::GetServiceInfoReq,::ServiceInfo::GetServiceInfoResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setServiceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setServiceInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServiceInfo::SetServiceInfoReq, ::ServiceInfo::SetServiceInfoResp>* streamer) {
                       return this->StreamedsetServiceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setServiceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setServiceInfo(::grpc::ServerContext* /*context*/, const ::ServiceInfo::SetServiceInfoReq* /*request*/, ::ServiceInfo::SetServiceInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetServiceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceInfo::SetServiceInfoReq,::ServiceInfo::SetServiceInfoResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getServiceInfo<WithStreamedUnaryMethod_setServiceInfo<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getServiceInfo<WithStreamedUnaryMethod_setServiceInfo<Service > > StreamedService;
};

}  // namespace ServiceInfo


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_ServiceInfo_2eproto__INCLUDED
