// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ServiceInfo.proto
// Protobuf C++ Version: 6.31.0

#ifndef ServiceInfo_2eproto_2epb_2eh
#define ServiceInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ServiceInfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_ServiceInfo_2eproto;
}  // extern "C"
namespace ServiceInfo {
enum Status : int;
extern const uint32_t Status_internal_data_[];
class GetServiceInfoReq;
struct GetServiceInfoReqDefaultTypeInternal;
extern GetServiceInfoReqDefaultTypeInternal _GetServiceInfoReq_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GetServiceInfoReq_class_data_;
class GetServiceInfoResp;
struct GetServiceInfoRespDefaultTypeInternal;
extern GetServiceInfoRespDefaultTypeInternal _GetServiceInfoResp_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GetServiceInfoResp_class_data_;
class MicroServiceInfo;
struct MicroServiceInfoDefaultTypeInternal;
extern MicroServiceInfoDefaultTypeInternal _MicroServiceInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull MicroServiceInfo_class_data_;
class SetServiceInfoReq;
struct SetServiceInfoReqDefaultTypeInternal;
extern SetServiceInfoReqDefaultTypeInternal _SetServiceInfoReq_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SetServiceInfoReq_class_data_;
class SetServiceInfoResp;
struct SetServiceInfoRespDefaultTypeInternal;
extern SetServiceInfoRespDefaultTypeInternal _SetServiceInfoResp_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SetServiceInfoResp_class_data_;
}  // namespace ServiceInfo
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ServiceInfo::Status_internal_data_>
    internal::EnumTraitsImpl::value<::ServiceInfo::Status>;
}  // namespace protobuf
}  // namespace google

namespace ServiceInfo {
enum Status : int {
  UNSPECIFIED = 0,
  OK = 1,
  FALSE = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Status_internal_data_[];
inline constexpr Status Status_MIN =
    static_cast<Status>(0);
inline constexpr Status Status_MAX =
    static_cast<Status>(2);
inline bool Status_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Status_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Status_descriptor();
template <typename T>
const ::std::string& Status_Name(T value) {
  static_assert(::std::is_same<T, Status>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Status_Parse(
    ::absl::string_view name, Status* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(Status_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class SetServiceInfoResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceInfo.SetServiceInfoResp) */ {
 public:
  inline SetServiceInfoResp() : SetServiceInfoResp(nullptr) {}
  ~SetServiceInfoResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetServiceInfoResp* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetServiceInfoResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetServiceInfoResp(::google::protobuf::internal::ConstantInitialized);

  inline SetServiceInfoResp(const SetServiceInfoResp& from) : SetServiceInfoResp(nullptr, from) {}
  inline SetServiceInfoResp(SetServiceInfoResp&& from) noexcept
      : SetServiceInfoResp(nullptr, ::std::move(from)) {}
  inline SetServiceInfoResp& operator=(const SetServiceInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceInfoResp& operator=(SetServiceInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetServiceInfoResp& default_instance() {
    return *reinterpret_cast<const SetServiceInfoResp*>(
        &_SetServiceInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SetServiceInfoResp& a, SetServiceInfoResp& b) { a.Swap(&b); }
  inline void Swap(SetServiceInfoResp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetServiceInfoResp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetServiceInfoResp* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetServiceInfoResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetServiceInfoResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetServiceInfoResp& from) { SetServiceInfoResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetServiceInfoResp* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceInfo.SetServiceInfoResp"; }

 protected:
  explicit SetServiceInfoResp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SetServiceInfoResp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SetServiceInfoResp& from);
  SetServiceInfoResp(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SetServiceInfoResp&& from) noexcept
      : SetServiceInfoResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // .ServiceInfo.Status status = 1;
  void clear_status() ;
  ::ServiceInfo::Status status() const;
  void set_status(::ServiceInfo::Status value);

  private:
  ::ServiceInfo::Status _internal_status() const;
  void _internal_set_status(::ServiceInfo::Status value);

  public:
  // @@protoc_insertion_point(class_scope:ServiceInfo.SetServiceInfoResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SetServiceInfoResp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceInfo_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SetServiceInfoResp_class_data_;
// -------------------------------------------------------------------

class MicroServiceInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceInfo.MicroServiceInfo) */ {
 public:
  inline MicroServiceInfo() : MicroServiceInfo(nullptr) {}
  ~MicroServiceInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MicroServiceInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MicroServiceInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MicroServiceInfo(::google::protobuf::internal::ConstantInitialized);

  inline MicroServiceInfo(const MicroServiceInfo& from) : MicroServiceInfo(nullptr, from) {}
  inline MicroServiceInfo(MicroServiceInfo&& from) noexcept
      : MicroServiceInfo(nullptr, ::std::move(from)) {}
  inline MicroServiceInfo& operator=(const MicroServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MicroServiceInfo& operator=(MicroServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MicroServiceInfo& default_instance() {
    return *reinterpret_cast<const MicroServiceInfo*>(
        &_MicroServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MicroServiceInfo& a, MicroServiceInfo& b) { a.Swap(&b); }
  inline void Swap(MicroServiceInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MicroServiceInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MicroServiceInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MicroServiceInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MicroServiceInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MicroServiceInfo& from) { MicroServiceInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MicroServiceInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceInfo.MicroServiceInfo"; }

 protected:
  explicit MicroServiceInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  MicroServiceInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const MicroServiceInfo& from);
  MicroServiceInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, MicroServiceInfo&& from) noexcept
      : MicroServiceInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kVersionFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string service_name = 1;
  void clear_service_name() ;
  const ::std::string& service_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_service_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_service_name();
  void set_allocated_service_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_service_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_service_name();

  public:
  // string ip = 2;
  void clear_ip() ;
  const ::std::string& ip() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_ip();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_ip();
  void set_allocated_ip(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_ip() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_ip();

  public:
  // string port = 3;
  void clear_port() ;
  const ::std::string& port() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_port();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_port();
  void set_allocated_port(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_port() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_port(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_port();

  public:
  // string version = 4;
  void clear_version() ;
  const ::std::string& version() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_version();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_version();
  void set_allocated_version(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_version() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_version(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // .ServiceInfo.Status status = 5;
  void clear_status() ;
  ::ServiceInfo::Status status() const;
  void set_status(::ServiceInfo::Status value);

  private:
  ::ServiceInfo::Status _internal_status() const;
  void _internal_set_status(::ServiceInfo::Status value);

  public:
  // @@protoc_insertion_point(class_scope:ServiceInfo.MicroServiceInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 62,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const MicroServiceInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceInfo_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull MicroServiceInfo_class_data_;
// -------------------------------------------------------------------

class GetServiceInfoReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceInfo.GetServiceInfoReq) */ {
 public:
  inline GetServiceInfoReq() : GetServiceInfoReq(nullptr) {}
  ~GetServiceInfoReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetServiceInfoReq* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetServiceInfoReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceInfoReq(::google::protobuf::internal::ConstantInitialized);

  inline GetServiceInfoReq(const GetServiceInfoReq& from) : GetServiceInfoReq(nullptr, from) {}
  inline GetServiceInfoReq(GetServiceInfoReq&& from) noexcept
      : GetServiceInfoReq(nullptr, ::std::move(from)) {}
  inline GetServiceInfoReq& operator=(const GetServiceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoReq& operator=(GetServiceInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceInfoReq& default_instance() {
    return *reinterpret_cast<const GetServiceInfoReq*>(
        &_GetServiceInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetServiceInfoReq& a, GetServiceInfoReq& b) { a.Swap(&b); }
  inline void Swap(GetServiceInfoReq* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceInfoReq* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceInfoReq* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetServiceInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetServiceInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetServiceInfoReq& from) { GetServiceInfoReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetServiceInfoReq* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceInfo.GetServiceInfoReq"; }

 protected:
  explicit GetServiceInfoReq(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GetServiceInfoReq(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GetServiceInfoReq& from);
  GetServiceInfoReq(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GetServiceInfoReq&& from) noexcept
      : GetServiceInfoReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string service_name = 1;
  void clear_service_name() ;
  const ::std::string& service_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_service_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_service_name();
  void set_allocated_service_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_service_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_service_name();

  public:
  // @@protoc_insertion_point(class_scope:ServiceInfo.GetServiceInfoReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GetServiceInfoReq& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceInfo_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GetServiceInfoReq_class_data_;
// -------------------------------------------------------------------

class SetServiceInfoReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceInfo.SetServiceInfoReq) */ {
 public:
  inline SetServiceInfoReq() : SetServiceInfoReq(nullptr) {}
  ~SetServiceInfoReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetServiceInfoReq* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetServiceInfoReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetServiceInfoReq(::google::protobuf::internal::ConstantInitialized);

  inline SetServiceInfoReq(const SetServiceInfoReq& from) : SetServiceInfoReq(nullptr, from) {}
  inline SetServiceInfoReq(SetServiceInfoReq&& from) noexcept
      : SetServiceInfoReq(nullptr, ::std::move(from)) {}
  inline SetServiceInfoReq& operator=(const SetServiceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceInfoReq& operator=(SetServiceInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetServiceInfoReq& default_instance() {
    return *reinterpret_cast<const SetServiceInfoReq*>(
        &_SetServiceInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetServiceInfoReq& a, SetServiceInfoReq& b) { a.Swap(&b); }
  inline void Swap(SetServiceInfoReq* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetServiceInfoReq* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetServiceInfoReq* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetServiceInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetServiceInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetServiceInfoReq& from) { SetServiceInfoReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetServiceInfoReq* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceInfo.SetServiceInfoReq"; }

 protected:
  explicit SetServiceInfoReq(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SetServiceInfoReq(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SetServiceInfoReq& from);
  SetServiceInfoReq(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SetServiceInfoReq&& from) noexcept
      : SetServiceInfoReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .ServiceInfo.MicroServiceInfo service_info = 1;
  bool has_service_info() const;
  void clear_service_info() ;
  const ::ServiceInfo::MicroServiceInfo& service_info() const;
  [[nodiscard]] ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE release_service_info();
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL mutable_service_info();
  void set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value);
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE unsafe_arena_release_service_info();

  private:
  const ::ServiceInfo::MicroServiceInfo& _internal_service_info() const;
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL _internal_mutable_service_info();

  public:
  // @@protoc_insertion_point(class_scope:ServiceInfo.SetServiceInfoReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SetServiceInfoReq& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE service_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceInfo_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SetServiceInfoReq_class_data_;
// -------------------------------------------------------------------

class GetServiceInfoResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceInfo.GetServiceInfoResp) */ {
 public:
  inline GetServiceInfoResp() : GetServiceInfoResp(nullptr) {}
  ~GetServiceInfoResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetServiceInfoResp* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetServiceInfoResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceInfoResp(::google::protobuf::internal::ConstantInitialized);

  inline GetServiceInfoResp(const GetServiceInfoResp& from) : GetServiceInfoResp(nullptr, from) {}
  inline GetServiceInfoResp(GetServiceInfoResp&& from) noexcept
      : GetServiceInfoResp(nullptr, ::std::move(from)) {}
  inline GetServiceInfoResp& operator=(const GetServiceInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoResp& operator=(GetServiceInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceInfoResp& default_instance() {
    return *reinterpret_cast<const GetServiceInfoResp*>(
        &_GetServiceInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GetServiceInfoResp& a, GetServiceInfoResp& b) { a.Swap(&b); }
  inline void Swap(GetServiceInfoResp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceInfoResp* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceInfoResp* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetServiceInfoResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetServiceInfoResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetServiceInfoResp& from) { GetServiceInfoResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetServiceInfoResp* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceInfo.GetServiceInfoResp"; }

 protected:
  explicit GetServiceInfoResp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GetServiceInfoResp(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GetServiceInfoResp& from);
  GetServiceInfoResp(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GetServiceInfoResp&& from) noexcept
      : GetServiceInfoResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .ServiceInfo.MicroServiceInfo service_info = 1;
  bool has_service_info() const;
  void clear_service_info() ;
  const ::ServiceInfo::MicroServiceInfo& service_info() const;
  [[nodiscard]] ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE release_service_info();
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL mutable_service_info();
  void set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value);
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE unsafe_arena_release_service_info();

  private:
  const ::ServiceInfo::MicroServiceInfo& _internal_service_info() const;
  ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL _internal_mutable_service_info();

  public:
  // @@protoc_insertion_point(class_scope:ServiceInfo.GetServiceInfoResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GetServiceInfoResp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE service_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceInfo_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GetServiceInfoResp_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MicroServiceInfo

// string service_name = 1;
inline void MicroServiceInfo::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& MicroServiceInfo::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.MicroServiceInfo.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MicroServiceInfo::set_service_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceInfo.MicroServiceInfo.service_name)
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::mutable_service_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.MicroServiceInfo.service_name)
  return _s;
}
inline const ::std::string& MicroServiceInfo::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void MicroServiceInfo::_internal_set_service_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MicroServiceInfo::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.MicroServiceInfo.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.service_name_.Set("", GetArena());
  }
  return released;
}
inline void MicroServiceInfo::set_allocated_service_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.MicroServiceInfo.service_name)
}

// string ip = 2;
inline void MicroServiceInfo::clear_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& MicroServiceInfo::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.MicroServiceInfo.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MicroServiceInfo::set_ip(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceInfo.MicroServiceInfo.ip)
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::mutable_ip()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.MicroServiceInfo.ip)
  return _s;
}
inline const ::std::string& MicroServiceInfo::_internal_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_.Get();
}
inline void MicroServiceInfo::_internal_set_ip(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::_internal_mutable_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ip_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MicroServiceInfo::release_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.MicroServiceInfo.ip)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.ip_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ip_.Set("", GetArena());
  }
  return released;
}
inline void MicroServiceInfo::set_allocated_ip(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.MicroServiceInfo.ip)
}

// string port = 3;
inline void MicroServiceInfo::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& MicroServiceInfo::port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.MicroServiceInfo.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MicroServiceInfo::set_port(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceInfo.MicroServiceInfo.port)
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::mutable_port()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.MicroServiceInfo.port)
  return _s;
}
inline const ::std::string& MicroServiceInfo::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_.Get();
}
inline void MicroServiceInfo::_internal_set_port(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.port_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::_internal_mutable_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.port_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MicroServiceInfo::release_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.MicroServiceInfo.port)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.port_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.port_.Set("", GetArena());
  }
  return released;
}
inline void MicroServiceInfo::set_allocated_port(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_.IsDefault()) {
    _impl_.port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.MicroServiceInfo.port)
}

// string version = 4;
inline void MicroServiceInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& MicroServiceInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.MicroServiceInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void MicroServiceInfo::set_version(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceInfo.MicroServiceInfo.version)
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.MicroServiceInfo.version)
  return _s;
}
inline const ::std::string& MicroServiceInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void MicroServiceInfo::_internal_set_version(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL MicroServiceInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.version_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE MicroServiceInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.MicroServiceInfo.version)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.version_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.version_.Set("", GetArena());
  }
  return released;
}
inline void MicroServiceInfo::set_allocated_version(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.MicroServiceInfo.version)
}

// .ServiceInfo.Status status = 5;
inline void MicroServiceInfo::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::ServiceInfo::Status MicroServiceInfo::status() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.MicroServiceInfo.status)
  return _internal_status();
}
inline void MicroServiceInfo::set_status(::ServiceInfo::Status value) {
  _internal_set_status(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:ServiceInfo.MicroServiceInfo.status)
}
inline ::ServiceInfo::Status MicroServiceInfo::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ServiceInfo::Status>(_impl_.status_);
}
inline void MicroServiceInfo::_internal_set_status(::ServiceInfo::Status value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// GetServiceInfoReq

// string service_name = 1;
inline void GetServiceInfoReq::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& GetServiceInfoReq::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.GetServiceInfoReq.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GetServiceInfoReq::set_service_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceInfo.GetServiceInfoReq.service_name)
}
inline ::std::string* PROTOBUF_NONNULL GetServiceInfoReq::mutable_service_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.GetServiceInfoReq.service_name)
  return _s;
}
inline const ::std::string& GetServiceInfoReq::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void GetServiceInfoReq::_internal_set_service_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL GetServiceInfoReq::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE GetServiceInfoReq::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.GetServiceInfoReq.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.service_name_.Set("", GetArena());
  }
  return released;
}
inline void GetServiceInfoReq::set_allocated_service_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.GetServiceInfoReq.service_name)
}

// -------------------------------------------------------------------

// GetServiceInfoResp

// .ServiceInfo.MicroServiceInfo service_info = 1;
inline bool GetServiceInfoResp::has_service_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_info_ != nullptr);
  return value;
}
inline void GetServiceInfoResp::clear_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_info_ != nullptr) _impl_.service_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ServiceInfo::MicroServiceInfo& GetServiceInfoResp::_internal_service_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ServiceInfo::MicroServiceInfo* p = _impl_.service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServiceInfo::MicroServiceInfo&>(::ServiceInfo::_MicroServiceInfo_default_instance_);
}
inline const ::ServiceInfo::MicroServiceInfo& GetServiceInfoResp::service_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.GetServiceInfoResp.service_info)
  return _internal_service_info();
}
inline void GetServiceInfoResp::unsafe_arena_set_allocated_service_info(
    ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_info_);
  }
  _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceInfo.GetServiceInfoResp.service_info)
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE GetServiceInfoResp::release_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServiceInfo::MicroServiceInfo* released = _impl_.service_info_;
  _impl_.service_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE GetServiceInfoResp::unsafe_arena_release_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.GetServiceInfoResp.service_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServiceInfo::MicroServiceInfo* temp = _impl_.service_info_;
  _impl_.service_info_ = nullptr;
  return temp;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL GetServiceInfoResp::_internal_mutable_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ServiceInfo::MicroServiceInfo>(GetArena());
    _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(p);
  }
  return _impl_.service_info_;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL GetServiceInfoResp::mutable_service_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ServiceInfo::MicroServiceInfo* _msg = _internal_mutable_service_info();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.GetServiceInfoResp.service_info)
  return _msg;
}
inline void GetServiceInfoResp::set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.GetServiceInfoResp.service_info)
}

// -------------------------------------------------------------------

// SetServiceInfoReq

// .ServiceInfo.MicroServiceInfo service_info = 1;
inline bool SetServiceInfoReq::has_service_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_info_ != nullptr);
  return value;
}
inline void SetServiceInfoReq::clear_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_info_ != nullptr) _impl_.service_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ServiceInfo::MicroServiceInfo& SetServiceInfoReq::_internal_service_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ServiceInfo::MicroServiceInfo* p = _impl_.service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServiceInfo::MicroServiceInfo&>(::ServiceInfo::_MicroServiceInfo_default_instance_);
}
inline const ::ServiceInfo::MicroServiceInfo& SetServiceInfoReq::service_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceInfo.SetServiceInfoReq.service_info)
  return _internal_service_info();
}
inline void SetServiceInfoReq::unsafe_arena_set_allocated_service_info(
    ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_info_);
  }
  _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceInfo.SetServiceInfoReq.service_info)
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE SetServiceInfoReq::release_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServiceInfo::MicroServiceInfo* released = _impl_.service_info_;
  _impl_.service_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE SetServiceInfoReq::unsafe_arena_release_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceInfo.SetServiceInfoReq.service_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ServiceInfo::MicroServiceInfo* temp = _impl_.service_info_;
  _impl_.service_info_ = nullptr;
  return temp;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL SetServiceInfoReq::_internal_mutable_service_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ServiceInfo::MicroServiceInfo>(GetArena());
    _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(p);
  }
  return _impl_.service_info_;
}
inline ::ServiceInfo::MicroServiceInfo* PROTOBUF_NONNULL SetServiceInfoReq::mutable_service_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ServiceInfo::MicroServiceInfo* _msg = _internal_mutable_service_info();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.SetServiceInfoReq.service_info)
  return _msg;
}
inline void SetServiceInfoReq::set_allocated_service_info(::ServiceInfo::MicroServiceInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.service_info_ = reinterpret_cast<::ServiceInfo::MicroServiceInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.SetServiceInfoReq.service_info)
}

// -------------------------------------------------------------------

// SetServiceInfoResp

// .ServiceInfo.Status status = 1;
inline void SetServiceInfoResp::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ServiceInfo::Status SetServiceInfoResp::status() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.SetServiceInfoResp.status)
  return _internal_status();
}
inline void SetServiceInfoResp::set_status(::ServiceInfo::Status value) {
  _internal_set_status(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:ServiceInfo.SetServiceInfoResp.status)
}
inline ::ServiceInfo::Status SetServiceInfoResp::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ServiceInfo::Status>(_impl_.status_);
}
inline void SetServiceInfoResp::_internal_set_status(::ServiceInfo::Status value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ServiceInfo


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ServiceInfo::Status> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ServiceInfo::Status>() {
  return ::ServiceInfo::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ServiceInfo_2eproto_2epb_2eh
